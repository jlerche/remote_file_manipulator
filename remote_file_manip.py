"""
remote_file_manip.py
python remote_file_manip.py -h to read the help generated by argparse
Example usage: python remote_file_manip.py -host bob -replace old new -file config.ini

-host:    the host to be SSHed into, must be present in /etc/hosts
-file:    the path to the file on the host
-head:    insert the string provided as input at the beginning of the file provided by -file
-replace: takes two strings as input, -replace old new, and replaces instances of old with new
          in the file provided by -file
-append:  appends the string provided as input to the end of the file provided by -file
"""
import paramiko
import argparse
import socket
import sys


def get_address(host):
    with open('/etc/hosts', 'r') as etc_hosts:
        for line in etc_hosts:
            if not line.startswith('#') and host in line:
                address, name = line.split()
                try:
                    socket.inet_aton(address)
                except socket.error as e:
                    sys.exit('The IP address associated with the hostname is not valid.')
                return address

    return None


def ssh_to_host(address):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(address)
    return ssh


def construct_cmdlist(path):
    backup = path + '.bak'
    cmdlist = ['cp ' + path + ' ' + backup]
    return cmdlist


def concat_cmd(cmdlist):
    return ';'.join(cmdlist)


def write_to_head(path, argval):
    cmdlist = construct_cmdlist(path)
    cmdlist.append("sed -i '1i " + argval + "' " + path)
    return concat_cmd(cmdlist)


def replace_with_input(path, argvals):
    old = argvals[0]
    new = argvals[1]
    cmdlist = construct_cmdlist(path)
    cmdlist.append("sed -i 's/" + old + "/" + new + "/' " + path)
    return concat_cmd(cmdlist)


def append_to_file(path, argval):
    cmdlist = construct_cmdlist(path)
    cmdlist.append("echo '" + argval + "' >> " + path)
    return concat_cmd(cmdlist)


def main():
    parser = argparse.ArgumentParser(description='A script to ssh into a provided host, change a file'
                                                 ' and then report back the change.'
                                                 ' A typical usage would be \n'
                                                 'python remote_file_manip.py -host bob -replace old new -file config.ini',
                                     add_help=True, version='0.1',
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-host', action='store', dest='host', required=True)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-head', action='store', dest='head',
                       help='option to add lines to the beginning of a file.')
    group.add_argument('-replace', nargs=2, dest='replace',
                       help='given a string, replaces it with another string.')
    group.add_argument('-append', dest='append',
                       help='appends the given string to the end of the file.')
    parser.add_argument('-file', dest='file',
                        help='the path to the file to be manipulated.',
                        required=True)
    args = parser.parse_args()

    address = get_address(args.host)
    if address is None:
        sys.exit('Hostname not found in /etc/hosts.')
    ssh = ssh_to_host(address)
    path = args.file
    backup = path + '.bak'

    if args.head is not None:
        cmd = write_to_head(path, args.head)
    elif args.replace is not None:
        cmd = replace_with_input(path, args.replace)
    elif args.append is not None:
        cmd = append_to_file(path, args.append)
    else:
        cmd = None

    if cmd is not None:
        ssh.exec_command(cmd)
    else:
        sys.exit('Please double check that the command line arguments are correct.')
    stdin, stdout, stderr = ssh.exec_command('diff ' + path + ' ' + backup)
    print stdout.read() or stderr.read()

    ssh.exec_command('rm ' + backup)
    ssh.close()


if __name__ == '__main__':
    main()
